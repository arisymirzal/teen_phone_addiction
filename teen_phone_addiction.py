# -*- coding: utf-8 -*-
"""Teen_Phone_Addiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFPJ7HNRW0qQT1h3eUgiTvRr-FVHpRiT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df = pd.read_csv("teen_phone_addiction_dataset.csv")
df.head()

df

df.info()

numeric_df = df.select_dtypes(include=['float64', 'int64'])
korelasi = numeric_df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(korelasi, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Heatmap Korelasi antar Fitur")
plt.show()

df.describe()

# Mengecek data yang kosong menggunakan isnull().sum()
df.isnull().sum()

# Mengecek data duplikat menggunakan duplicated().sum()
df.duplicated().sum()

# Hapus kolom yang tidak relevan
df_model = df.drop(columns=["ID", "Name", "Location"])

# Encode kolom kategorikal
categorical_cols = df_model.select_dtypes(include=["object"]).columns
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    df_model[col] = le.fit_transform(df_model[col])
    label_encoders[col] = le

# Pisahkan fitur (X) dan target (y)
X = df_model.drop(columns=["Addiction_Level"])
y = df_model["Addiction_Level"]

# Split data train-test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Modeling
model = RandomForestRegressor(
    random_state=42, n_estimators=100
)
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Evaluasi Model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\n=== Evaluation Results ===")
print("MSE  :", mse)
print("RMSE :", rmse)
print("MAE  :", mae)
print("R2   :", r2)

# Feature Importance
importances = model.feature_importances_
feature_names = X.columns

# Urutkan berdasarkan importance
indices = np.argsort(importances)[::-1]
sorted_features = [feature_names[i] for i in indices]

# Plot feature importance
plt.figure(figsize=(10,6))
plt.bar(range(len(importances)), importances[indices], align="center")
plt.xticks(range(len(importances)), sorted_features, rotation=90)
plt.title("Feature Importance - Random Forest Regressor")
plt.tight_layout()
plt.show()

plt.figure(figsize=(7,5))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.xlabel("Actual Addiction Level")
plt.ylabel("Predicted Addiction Level")
plt.title("Actual vs Predicted Addiction Level")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')  # garis ideal
plt.show()